define("spoopy.engine",["underscore","jquery","pubsub"],(e,n,t)=>{"use strict";function o(e){if(!(this instanceof o))throw new TypeError("Engine constructor cannot be called as function!");this.adjacency={},this.exclusions=[],this.available=e}return o.DEFAULT_STARTING_LOCATION="Foyer",o.prototype={constructor:o,build_room_nav_link:function(e){return n("<li>").html(n("<a>",{text:e,href:"#",click:function(){t.publish("ENGINE_NAV_CLICK",e)}}))},get_room:function(n){let t=void 0===n?e.filter(this.available,function(n){return!e.contains(this.exc,n)},{exc:this.exclusions}):e.filter(n.use_list,n.filter_function,n.context);if(t.length>0){let n=e.sample(t);return console.log("get_room():",n),n}console.error("get_room(): no valid draw available")},update_exclusions:function(n){console.log("pre-upd exc:",this.exclusions),this.exclusions=e.chain(this.exclusions).union(n).unique().value(),console.log("updated exc:",this.exclusions)},update_adjacency:function(n,t){void 0!==n&&void 0!==t?(void 0===this.adjacency[n]&&(this.adjacency[n]=[]),void 0===this.adjacency[t]&&(this.adjacency[t]=[]),this.adjacency[n].push(t),this.adjacency[t].push(n),this.adjacency[n]=e.unique(this.adjacency[n]),this.adjacency[t]=e.unique(this.adjacency[t])):console.error("update_adjacency(): undefined is not valid for adjacency")},get_branches:function(n){return e.chain(this.adjacency).filter(function(e){return e.toString()!==this.t.toString()},{t:n}).first().value()},build_at:function(n,t){this.update_exclusions([n]);for(let o in e.range(e.isFunction(t)?t():t)){let e=this.get_room();if(void 0===e){console.log("build_at(): error, no available rooms");break}this.update_adjacency(n,e),this.update_exclusions([e])}},connect_random_leaves:function(n){let t={use_list:this.exclusions,filter_function:function(n){return 1===this.adj[n].length&&!e.contains(this.exc,n)},context:{adj:this.adjacency,exc:[]}};for(let o in e.range(n)){let e=this.get_room(t);t.context.exc.push(e),console.log("connect_random_leaves(): leaf_1",e,t.context.exc);let n=this.get_room(t);t.context.exc.push(n),console.log("connect_random_leaves(): leaf 2",n,t.context.exc),this.update_adjacency(e,n),console.log("connect_random_leaves(): adj",this.adjacency)}},build_map:function(n){this.build_at(n.start.loc,e.random(n.start.min_branches,n.start.max_branches)),console.log("build_map(): root complete ->",this.adjacency,this.exclusions),console.log("build_map(): branches @",n.start.loc,this.get_branches(n.start.loc));let t=this.get_branches(n.start.loc);for(let o in e.range(n.gens)){console.log("build_map(): building generation",o);for(let e in t)console.log("build_map(): building branch @",t[e]),this.build_at(t[e],n.gens_fn())}console.log("build_map(): done branches ->",this.adjacency,this.exclusions),console.log("build_map(): connecting random leaves..."),this.connect_random_leaves(n.leaf_connections)}},o});